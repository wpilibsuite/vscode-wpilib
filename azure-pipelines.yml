jobs:
 - job: Linux
   pool:
    vmImage: 'Ubuntu 16.04'

   steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '8.x'
      displayName: 'Install Node.js'

    - task: Gradle@2
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'build updateVersions updateAllDependencies'
        options: '-PjenkinsBuild'

    - script: |
        npm install
      workingDirectory: $(Build.SourcesDirectory)/wpilib-utility-standalone
      displayName: 'npm install'

    - script: |
        npm run compile
      workingDirectory: $(Build.SourcesDirectory)/wpilib-utility-standalone
      displayName: 'npm compile'

    - script: |
        npm run lint
      workingDirectory: $(Build.SourcesDirectory)/wpilib-utility-standalone
      displayName: 'npm lint'

    - script: |
        npm run packageLinux
      workingDirectory: $(Build.SourcesDirectory)/wpilib-utility-standalone
      displayName: 'npm package'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: $(Build.SourcesDirectory)/wpilib-utility-standalone/build/wpilibutility-linux-x64
        includeRootFolder: false
        archiveType: 'tar'
        archiveFile: '$(Build.ArtifactStagingDirectory)/wpilibutility-linux.tar.gz'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: 'Linux'

 - job: Windows_Standalone
   pool:
    vmImage: 'vs2017-win2016'

   steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '8.x'
      displayName: 'Install Node.js'

    - task: Gradle@2
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'build updateVersions updateAllDependencies'
        options: '-PjenkinsBuild'

    - script: |
        npm install
      workingDirectory: $(Build.SourcesDirectory)/wpilib-utility-standalone
      displayName: 'npm install'

    - script: |
        npm run compile
      workingDirectory: $(Build.SourcesDirectory)/wpilib-utility-standalone
      displayName: 'npm compile'

    - script: |
        npm run lint
      workingDirectory: $(Build.SourcesDirectory)/wpilib-utility-standalone
      displayName: 'npm lint'

    - script: |
        npm run packageWindows
      workingDirectory: $(Build.SourcesDirectory)/wpilib-utility-standalone
      displayName: 'npm package'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: $(Build.SourcesDirectory)/wpilib-utility-standalone/build/wpilibutility-win32-ia32
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/wpilibutility-windows.zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: 'WindowsStandalone'

 - job: Windows_VSIX
   pool:
    vmImage: 'vs2017-win2016'

   steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '8.x'
      displayName: 'Install Node.js'

    - task: Gradle@2
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'build updateVersions updateAllDependencies'
        options: '-PjenkinsBuild'

    - script: |
        npm install
      workingDirectory: $(Build.SourcesDirectory)/vscode-wpilib
      displayName: 'npm install'

    - script: |
        npm run compile
      workingDirectory: $(Build.SourcesDirectory)/vscode-wpilib
      displayName: 'npm compile'

    - script: |
        npm run lint
      workingDirectory: $(Build.SourcesDirectory)/vscode-wpilib
      displayName: 'npm lint'

    - script: |
        npm run unittest
      workingDirectory: $(Build.SourcesDirectory)/vscode-wpilib
      displayName: 'npm unittest'

    - script: |
        npm run gulp
      workingDirectory: $(Build.SourcesDirectory)/vscode-wpilib
      displayName: 'npm gulp'

    - script: |
        npm run webpack
      workingDirectory: $(Build.SourcesDirectory)/vscode-wpilib
      displayName: 'npm webpack'

    - script: |
        npm run vscePackage
      workingDirectory: $(Build.SourcesDirectory)/vscode-wpilib
      displayName: 'npm package'

    - task: CopyFiles@2
      inputs:
        contents: '**\*.vsix'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: 'WindowsVSIX'

 - job: Mac
   pool:
    vmImage: 'xcode9-macos10.13'

   steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '8.x'
      displayName: 'Install Node.js'

    - task: Gradle@2
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: false
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'build updateVersions updateAllDependencies'
        options: '-PjenkinsBuild'

    - script: |
        npm install
      workingDirectory: $(Build.SourcesDirectory)/wpilib-utility-standalone
      displayName: 'npm install'

    - script: |
        npm run compile
      workingDirectory: $(Build.SourcesDirectory)/wpilib-utility-standalone
      displayName: 'npm compile'

    - script: |
        npm run lint
      workingDirectory: $(Build.SourcesDirectory)/wpilib-utility-standalone
      displayName: 'npm lint'

    - script: |
        npm run packageMac
      workingDirectory: $(Build.SourcesDirectory)/wpilib-utility-standalone
      displayName: 'npm package'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: $(Build.SourcesDirectory)/wpilib-utility-standalone/build/wpilibutility-darwin-x64
        includeRootFolder: false
        archiveType: 'tar'
        archiveFile: '$(Build.ArtifactStagingDirectory)/wpilibutility-mac.tar.gz'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: 'Mac'
